/*
 * Copyright 2013 Grzegorz Ligas <ligasgr@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'idea'
apply from: 'idea.gradle'
sourceCompatibility = 1.6

// Update this path to point to your IDEA installation
project.ext.userDefinedInstallationPath = ''
project.ext.sdkDir = 'sdk'
project.ext.sdkVersion = '129.713'
project.ext.ideaSdk = 'idea-IC-' + project.ext.sdkVersion
project.ext.ideaSdkName = 'IDEA IC-' + project.ext.sdkVersion
if (project.ext.userDefinedInstallationPath)
    project.ext.ideaInstallationPath = project.ext.userDefinedInstallationPath
else
    project.ext.ideaInstallationPath = project.ext.sdkDir + "/" + project.ext.ideaSdk
project.ext.ideaInstallationSource = 'http://download.jetbrains.com/idea/ideaIC-12.1.4.tar.gz'
project.ext.ideaArchiveFileName = project.ext.ideaInstallationSource.substring(project.ext.ideaInstallationSource.lastIndexOf('/'))

configurations {
    provided
}

sourceSets {
    main {
        java {
            srcDirs 'gen'
        }
        compileClasspath += configurations.provided
    }
}

processResources {
    from(projectDir) {
        include 'META-INF/**'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile fileTree(dir: project.ext.ideaInstallationPath + '/lib', include: '*.jar')
    provided files("${System.properties['java.home']}/../lib/tools.jar")
    testCompile 'org.mockito:mockito-all:1.9.5'
}

test {
    jvmArgs = ['-Didea.home.path=' + project.ext.ideaInstallationPath, '-Didea.test.group=ALL_EXCLUDE_DEFINED', '-Didea.config.path=sdk/config', '-Didea.system.path=sdk/system', '-ea']
    exclude '**/*PerformanceTest.*'
}

task performanceTest(type: Test) {
    include '**/*PerformanceTest.*'
}

metaInf << files('/META-INF/plugin.xml')

tasks.withType(Compile) { 
    options.compilerArgs << "-Xlint:unchecked" 
}

task downloadSdk(type: DownloadTask) {
    sourceUrl = project.ext.ideaInstallationSource
    target = file(project.ext.sdkDir + '/' + project.ext.ideaArchiveFileName)
}

task unzipSdk << {
    copy {
        from tarTree(resources.gzip(project.ext.sdkDir + '/' + project.ext.ideaArchiveFileName))
        into file('sdk/')
    }
}

class DownloadTask extends DefaultTask {
    @Input
    String sourceUrl

    @OutputFile
    File target

    @TaskAction
    void download() {
        ant.get(src: sourceUrl, dest: target)
    }
}
