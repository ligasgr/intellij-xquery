/*
 * Copyright 2013-2017 Grzegorz Ligas <ligasgr@gmail.com> and other contributors
 * (see the CONTRIBUTORS file).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



apply plugin: 'groovy'  // Groovy plugin extends Java plugin
apply plugin: 'idea'
apply from: 'idea.gradle'

sourceCompatibility = 1.8

sourceSets {
    // This is necessary to make Java and Groovy compile happily together.  The Groovy compiler will compile .java files, but not vice-versa
    // The Groovy compile task apparently does not include resource files in the source tree, so add a rule to pick them up too
    main {
        java { srcDirs = [] }
        groovy { srcDirs = ["src/main/java"] }
        resources {
            srcDirs = ['src/main/java', 'src/main/resources']
            exclude '**/*.java'
            exclude '**/*.groovy'
            exclude '**/z.*'
            exclude '**/zz.*'
        }
    }
    testFunctional {
        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime
    }
}

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        url "http://xqj.net/maven/"
    }
    maven {
        url "http://developer.marklogic.com/maven2"
    }
}

dependencies {
    compile fileTree(dir: 'lib', include: '*.jar')
    // This should match the netty version in the IntelliJ SDK, the Codnos debugger library has a hard dependency on a very old version of netty
    compile ('io.netty:netty-all:4.1.41.Final') {
	    force = true
    }
    compile 'org.codehaus.groovy:groovy-all:2.4.17'
    compile('com.codnos:dbgp-interfaces:1.0.0') {
        exclude group: 'io.netty', module: 'netty-all'
        ext.transitive = false
    }
    compile 'commons-codec:commons-codec:1.10'
    compile 'com.marklogic:marklogic-xcc:10.0.2'
    testCompile 'junit:junit-dep:4.10'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile('org.hamcrest:hamcrest-library:1.1') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    testCompile  'com.jayway.awaitility:awaitility:1.7.0'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}

test {
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

task testFunctional(type: Test) {
    testClassesDir = sourceSets.testFunctional.output.classesDir
    classpath = sourceSets.testFunctional.runtimeClasspath
    testLogging {
        events "started", "passed", "skipped", "failed", "standardOut", "standardError"
    }
}

task allTests(dependsOn: [test, testFunctional])
